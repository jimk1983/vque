#!/bin/bash
make_file="Makefile"
#项目目录定义
#项目依赖依次顺序放在前面
#每个目录是单独的形式存在，具备单独的Makefile来控制
#=================================================
#项目
declare -a projectalls
projectalls=(
	libvos
	libvque
	gateway
	client
)
#=================================================
#输出项目配置项
declare -A libvos
libvos=([types]=ar
	[links]="-ldl -lpthread -lrt -lm"
	[cflags]="-I.")

declare -A libvque
libvque=([types]=ar
        [links]="-lvos -ldl -lpthread -lrt -lm"
        [cflags]="-I.")

declare -A gateway
gateway=([types]=app
        [links]="-lvque -lvos -ldl -lpthread -lrt -lm"
        [cflags]="-I.")

declare -A client
client=([types]=app
        [links]="-lvque -lvos -ldl -lpthread -lrt -lm"
        [cflags]="-I.")



#=================================================
#make编译配置
CC=gcc
CFLAGS=-Wall
MAKE=make
AR=ar
CFLAGS+=-Werror
AR+=cr

#CFLAGS += -g -O0 #单步调试-O0, 否则-O3
#CFLAGS += -std=c++11

#目录
ROOT_DEP="${ROOTDIR}/deps"
ROOT_BIN="${ROOTDIR}/outs"
INSTALL_BIN="/usr/local/bin"
INSTALL_LIB="/usr/local/lib"
INSTALL_INC="/usr/local/include"

#MakeFile编译文件生成
cat << !MAKE_ALL! > $make_file
ifeq (\$(BUILDS), debug)
	CFLAGS=-g
else ifeq (\$(BUILDS), release)
	CFLAGS=-O3
else
    	BUILDS=release
	CFLAGS=-O3
endif

BUILDS_DIR=\$(ROOT_BIN)/\$(BUILDS)
OBJ_DIR=\$(ROOT_BIN)/\$(BUILDS)_obj

# installation directory
INST_BIN=${INSTALL_BIN}
INST_LIB=${INSTALL_LIB}
INST_INC=${INSTALL_INC}

# version control
VERSION=${mversion}
VER_MAJOR=${mver_major}
VER_MINOR=${mver_minor}
VER_REVISION=${mver_revision}

# all : prepare targets...
!MAKE_ALL!

for item in ${projectalls[@]}; 
do
	pdbg "========================================================================"
	pdbg "project: ${item}"
	target_so_name=""
    	target_so_major=""
    	target_so=""
    	target_ar=""
    	target_app=""
    	target_objs=""
    	target_ars=""
	pdbg "${item}"
	types=$(eval echo \${${item}[types]})
	pdbg "${types}"

	if [ "$types" = "so" ]; then
		pdbg "output so: ${target_so}"
	elif [ "$types" = "ar" ]; then
		pdbg "output ar: ${target_ar}"
	elif [ "$types" = "app" ]; then
		pdbg "output app: ${target_app}"
	else
        	perr "UNKNOWN type(${types}) error!"
        	pinf "type mast be: so|ar|so+ar|app"
        exit 1
	fi
	

done










