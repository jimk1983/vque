#!/bin/bash
make_file="Makefile"
#项目目录定义
#项目依赖依次顺序放在前面
#每个目录是单独的形式存在，具备单独的Makefile来控制
#=================================================
#项目名称
declare -a projectalls
projectalls=(
	libvos
	libvque
	proxygw
	example
)

#依赖头文件
make_depsinc="-I. -I${ROOTDIR}/deps/include"
make_depslink="-L${ROOTDIR}/deps/lib -L${ROOTDIR}/libs/linux"
#=================================================
#输出项目配置项
# type    	[so|app|ar] lib输出静态库,app输出可执行程序, ar 静态库
# rootpath  [folder]  顶层目录
# makepath  [folder1 folde2 ..]  基于顶层目录下的多个待编译的子目录
# links     [-lpthread ..]  编译链接库选项
# cflags    [-I. ..]  gcc编译option flag选项

declare -A libvos
libvos=([types]=ar
	[rootpath]="libs"
	[makepath]="libvos"
	[links]="${make_depslink} -ldl -lpthread -lrt -lm"
	[cflags]="${make_depsinc}")

declare -A libvque
libvque=([types]=ar
	[rootpath]="libs"
	[makepath]="libvque"
        [links]="${make_depslink} -lvos -ldl -lpthread -lrt -lm"
        [cflags]="${make_depsinc}")

declare -A proxygw
proxygw=([types]=app
	[rootpath]="src"
	[makepath]="main share"
        [links]="${make_depslink} -lvque -lvos -ldl -lpthread -lrt -lm"
        [cflags]="${make_depsinc}")

declare -A example
example=([types]=app
	[rootpath]="example"
	[makepath]="client"
        [links]="${make_depslink} -lvque -lvos -ldl -lpthread -lrt -lm"
        [cflags]="${make_depsinc}")

#=================================================
#make编译配置
CC=gcc
CFLAGS=-Wall
MAKE=make
AR=ar
CFLAGS+=-Werror
AR+=cr

#CFLAGS += -g -O0 #单步调试-O0, 否则-O3
#CFLAGS += -std=c++11

#目录
ROOT_DEP="${ROOTDIR}/deps"
ROOT_BIN="${ROOTDIR}/outs"
INSTALL_BIN="/usr/local/bin"
INSTALL_LIB="/usr/local/lib"
INSTALL_INC="/usr/local/include"

#MakeFile编译文件生成
cat << !MAKE_ALL! > $make_file
ifeq (\$(BUILDS), debug)
	CFLAGS=-g
else ifeq (\$(BUILDS), release)
	CFLAGS=-O3
else
    	BUILDS=release
	CFLAGS=-O3
endif

BUILDS_DIR=\$(ROOT_BIN)/\$(BUILDS)
OBJ_DIR=\$(ROOT_BIN)/\$(BUILDS)_obj

# installation directory
INST_BIN=${INSTALL_BIN}
INST_LIB=${INSTALL_LIB}
INST_INC=${INSTALL_INC}

# version control
VERSION=${mversion}
VER_MAJOR=${mver_major}
VER_MINOR=${mver_minor}
VER_REVISION=${mver_revision}

# all : prepare targets...
!MAKE_ALL!

#Start to create new Makefile

# 预先创建子目录
make_subdir=""
# .c => .o 规则集合记录
make_obj_file="objs.mk"
# 目标预制文件记录
make_target_file="target.mk"
# 安装临时文件记录
make_install_file="install.mk"
# 卸载临时文件记录
make_uninstall_file="uninstall.mk"
# obj 对象集合，避免重复编译记录
make_obj_names=""

declare -A make_deps


for item in ${projectalls[@]}; 
do
	pdbg "========================================================================"
	pdbg "project: ${item}"
	target_so_name=""
    	target_so_major=""
    	target_so=""
    	target_ar=""
    	target_app=""
    	target_objs=""
    	target_ars=""
	
	types=$(eval echo \${${item}[types]})

	make_cflag=$(eval echo \${$item[cflags]})

	if [ "$types" = "so" ]; then
		target_so_base="lib${item}.so"
        	target_so_name="\$(BUILDS_DIR)/${target_so_base}"
        	target_so_major="${target_so_name}.\$(VER_MAJOR)"
        	target_so="${target_so_name}.\$(VERSION)"
		
		make_deps[-l${item}]="$target_so"

		pdbg "output so: ${target_so}"
	elif [ "$types" = "ar" ]; then
		target_ar_base="lib${item}.a"
        	target_ar="\$(BUILDS_DIR)/${target_ar_base}"
		
		make_deps[-l${item}]="$target_so"

		pdbg "output ar: ${target_ar}"
	elif [ "$types" = "app" ]; then
		target_app_base="lib${item}"
                target_app="\$(BUILDS_DIR)/${target_ar_base}"
                
                make_deps[-l${item}]="$target_so"

		pdbg "output app: ${target_app}"
	else
        	perr "UNKNOWN type(${types}) error!"
        	pinf "type mast be: so|ar|so+ar|app"
        	exit 1
	fi

	pdbg "project: ${item}"
	


done










