#!/bin/bash
#author: 	jiangkang 
#datetime:	2019.07
make_file="Makefile"
MBUILDS=debug

#目录
INSTALL_BIN="/usr/local/bin"
INSTALL_LIB="/usr/local/lib"
INSTALL_INC="/usr/local/include"
#项目目录定inc="-I."
ROOT_DEP="${ROOTDIR}/deps"
ROOT_BIN="${ROOTDIR}/outs"
LIBS_INC="${ROOTDIR}/libs/include"
LIBS_BIN="${ROOTDIR}/libs/bins"
LIBS_SRC="${ROOTDIR}/libs/sources"

make_depsinc+="-I${ROOTDIR}/deps/include"
make_depslink="-L${ROOTDIR}/deps/lib "
make_depslink+="-I${ROOTDIR}/libs/include "
make_depslink+="-L${ROOTDIR}/libs/bins "

#make编译配置选项
CC=g++
COPTM="-Wall " 
MAKE=make
AR=ar
COPTM+="-Werror "
AR+=cr
COPTM+="-std=c++11 "
#CFLAGS += -g -O0 #单步调试-O0, 否则-O3
#CFLAGS+= -std=c++11 


#项目依赖依次顺序放在前面
#每个目录是单独的形式存在，具备单独的Makefile来控制
#=================================================
#项目名称
declare -a projectalls
projectalls=(
	vos
	vrct
	UtilFrame
	proxygw
	example
	examplevque
)
#
#输出项目配置项
# type    	[so|app|ar] so输出态库,app输出可执行程序, ar 静态库
# rootpath  [folder]  顶层目录,也是Makefile的执行目录
# makepath  [folder1 folde2 ..]  基于顶层目录下的多个待编译的子目录
# links     [-lpthread ..]  编译链接库选项
# cflags    [-I. ..]  gcc编译option flag选项
# builds    [yes|no]  是否生成目标输出

declare -A vos
vos=(	[types]=ar
	[builds]=yes
	[rootpath]="libs/sources/vos"
	[links]="-ldl -lpthread -lrt -lm"
	[cflags]="-I${LIBS_SRC}")

declare -A vrct
vrct=(	[types]=ar
	[builds]=yes
	[rootpath]="libs/sources/vrct"
	[links]="${make_depslink} -lvos -ldl -lpthread -lrt -lm"
	[cflags]="-I${LIBS_SRC} ${make_depsinc}")
	
	
declare -A UtilFrame
UtilFrame=(
        [types]=ar
        [builds]=yes
        [rootpath]="libs/sources/UtilFrame"
    	[links]="-ldl -lpthread -lrt -lm"
    	[cflags]="-I. -I${LIBS_SRC}")
declare -A proxygw
proxygw=(
	[types]=app
	[builds]=yes
	[rootpath]="src"
	[makepath]="main,share"
        [links]="${make_depslink} -lvrct -lvos -ldl -lpthread -lrt -lm"
        [cflags]="-I. -I${LIBS_SRC} ${make_depsinc}")

declare -A example
example=(
	[types]=app
	[builds]=yes
	[rootpath]="example"
	[makepath]="main,client,msque,server,timer,crct,config"
        [links]="${make_depslink} -lUtilFrame -lvrct -lvos -ldl -lpthread -lrt -lm"
        [cflags]="-I. -I${LIBS_SRC} -I${make_depsinc} ")

declare -A examplevque
examplevque=(
	[types]=app
	[builds]=yes
	[rootpath]="examplevque"
    	[links]="${make_depslink} -lUtilFrame -lvrct -lvos -ldl -lpthread -lrt -lm"
    	[cflags]="-I. -I${LIBS_SRC} -I${make_depsinc}")

#=================================================

function createmakefiles() {
#MakeFile编译文件生成
cat << !MAKE_ALL! > $1
BUILDS=${MBUILDS}

ifeq (\$(BUILDS), debug)
	CFLAG+=-g -O0
	BUILDS=debug
else ifeq (\$(BUILDS), release)
	CFLAG+=-O3
	BUILDS=release
else
	CFLAG+=-g -O0
endif

CFLAG+=${COPTM} 

#CFLAG+=-fgnu89-inline 

LDFLAGS=

# dependent include
DEP_DIR=${ROOTDIR}/deps
OUT_DIR=${ROOTDIR}/outs
ROOT_DIR=${ROOTDIR}

# installation directory
INST_BIN=${INSTALL_BIN}
INST_LIB=${INSTALL_LIB}
INST_INC=${INSTALL_INC}

# version control
VERSION=${mversion}
VER_MAJOR=${mver_major}
VER_MINOR=${mver_minor}
VER_REVISION=${mver_revision}

# all : prepare targets...
!MAKE_ALL!
}

#Start to create new Makefile

# 预先创建子目录
make_subdir=""
# .c => .o 规则集合记录
make_obj_file="objs.mk"
# 目标预制文件记录
make_target_file="target.mk"
# 安装临时文件记录
make_install_file="install.mk"
# 卸载临时文件记录
make_uninstall_file="uninstall.mk"
# obj 对象集合，避免重复编译记录
make_obj_names=""
# 依赖库
make_ldflags=""
# 目录
make_rootdir=""
# 库头文件
make_incdir=""

declare -A make_deps
declare -A srcfiles
declare -A incfiles

pdbg "config --builds=$BUILDS"

declare -i K

function getsrcfiles(){
    for element in `ls $1`
    do
        dir_or_file=$1"/"$element
        if [ -d $dir_or_file ]
		then
            getsrcfiles $dir_or_file
        else
            filename=$(find $dir_or_file -type f -a \( -name \*.c -o -name \*.C -o \
                             -name \*.cc -o -name \*.cpp -o -name \*.CPP \
                             -o -name \*.c++ -o -name \*.cp -o -name \*.cxx \));
			#pdbg "getsrcfiles param1=$1, element=$element, findin=$dir_or_file, K=[$K],filename=$filename"
			srcfiles[$K]=$filename
			K+=1
        fi
    done
}


function getincfiles(){
    for element in `ls $1`
    do
        dir_or_file=$1"/"$element
        if [ -d $dir_or_file ]
		then
			dirsname=$(echo $dir_or_file | sed -e "s/libs\/sources\///g")
			dirmname=$(echo $dirsname | sed -e "s/$make_rootdir\///g")
			mkdir -p ${make_incdir}/${dirmname}
            getincfiles $dir_or_file
        else
			#添加/表示替换的是目录
            filedirname=$(find $dir_or_file -type f -a \( -name \*.h -o -name \*.hpp \));
			srcincfile=${ROOTDIR}/${filedirname}
			#直接拷贝到头文件目录
			filenolibdirname=$(find $dir_or_file -type f -a \( -name \*.h -o -name \*.hpp \) | sed -e "s/libs\/sources\///g");
			filename=$(echo $filenolibdirname | sed -e "1,3s/$make_rootdir\///g")
			dstincfile=${make_incdir}/${filename}
			
			if [ ! -d ${srcincfile} ]
			then
				#pdbg "filename=$filename, srcincfile=$srcincfile, dstincfile=$dstincfile"
				cp -f $srcincfile $dstincfile
			fi
				
			incfiles[$K]=$filename
			K+=1
        fi
    done
}

pinf "========================================================================"
#多个工程遍历
for item in ${projectalls[@]}; 
do
	pinf "========================================================================"
	target_so_name=""
	target_so_major=""
	target_so=""
	target_ar=""
	target_app=""
	target_objs=""
	target_ars=""
	
	types=$(eval echo \${${item}[types]})
	build=$(eval echo \${${item}[builds]})
	make_cflag=$(eval echo \${$item[cflags]})
	make_ldflags+=$(eval echo \${${item}[links]})

	if [ "$build" != "yes" ] && [ "$build" != "on" ]; then
                #pwar "bulid(${build}), we will not build this target=${item}!"
                #pinf "if you want build, set [build]=yes"
                continue
        fi

	pinf "project: ${item}"	

	if [ "$types" = "so" ]; then
		target_so_base="lib${item}.so"
        	target_so_name="\$(BIN_DIR)/${target_so_base}"
        	target_so_major="${target_so_name}.\$(VER_MAJOR)"
        	target_so="${target_so_name}.\$(VERSION)"
		
		mkdir -p ${ROOTDIR}/libs/include/${item}
		make_deps[-l${item}]="$target_so"

		pinf "output [so]: ${target_so}"
	elif [ "$types" = "ar" ]; then
		target_ar_base="lib${item}.a"
        target_ar="\$(BIN_DIR)/${target_ar_base}"
		
		mkdir -p ${ROOTDIR}/libs/include/${item}
		make_deps[-l${item}]="$target_ar"

		pinf "output [ar]: ${target_ar}"
	elif [ "$types" = "app" ]; then
		target_app_base="${item}"
                target_app="\$(BIN_DIR)/${target_app_base}"
                
		pinf "output [app]: ${target_app}"
	else
        	perr "UNKNOWN type(${types}) error!"
        	pinf "type mast be: so|ar|so+ar|app"
        	exit 1
	fi
	
	#开始给每个工程单独新建Makefile
	makefiles=$make_file
	makefiles+=${item}
	createmakefiles ${makefiles}
	rootpath=$(eval echo \${${item}[rootpath]})
	make_rootdir="${item}"
	#获取工程项目根目录下的子目录，make链接子目录可以选择多个, 但注意根目录只能唯一
	makepath=$(eval echo \${${item}[makepath]})
	make_incdir=${LIBS_INC}/${item}
	pdbg "source major_path=${rootpath}, minor-path=${makepath}, make_incdir=$make_incdir"
	rootfull="$ROOTDIR/${rootpath}"	
	makearry=(${makepath//,/ })

	declare -A rootdirs
	
	#每个工程Makefile是单独编译生成的
	echo "BIN_DIR=${ROOT_BIN}/\$(BUILDS)" >> $makefiles
	echo "OBJ_DIR=${ROOT_BIN}/\$(BUILDS)_obj" >> $makefiles
	echo "SRC_DIR=${rootfull}" >> $makefiles
	echo "CFLAG+=${make_cflag}" >> $makefiles
	echo "LDFLAGS+=${make_ldflags}" >> $makefiles
	echo "LIBS_BIN=${ROOTDIR}/libs/bins/" >> $makefiles
	echo "LIBS_INC=${ROOTDIR}/libs/include/${item}/" >> $makefiles
	
	echo >> $makefiles
	
	printf "all : prepare" >> $makefiles
	
	#收集当前项目指定的源文件, root下的递归子目录的所有文件
	if [ -n "$makepath" ]; 
	then
		#如果存在多个子目录, 收集多个子目录
		K=0
		for itempath in ${makearry[@]};
		do
			#re-save the real full path
			rootdirs[$K]=${rootpath}/${itempath}		
			K+=1
		done
	else
		#否则只收集当前的根目录唯一即可
		rootdirs[0]=${rootpath}
		#头文件的相对目录:libs/sources/vos--库工程规定只能有一个目录
	fi
	
	#收集当前项目指定的源码目录下的源文件,全部收集在srcfiles
	K=0

	for itempath in ${rootdirs[@]}; 
	do
		getsrcfiles $itempath
	done
	
	for path_name in ${srcfiles[@]}; 
	do
		pdbg "src files= $path_name"
	done
	
	# 收集当前项目指定的源文件，转换为目标*.o组装处理
	# 目标文件的收集
	for path_name in ${srcfiles[@]}; do
		
		#pdbg $path_name
		obj_name="\$(OBJ_DIR)/${path_name%.*}.o"
		obj_path="\$(OBJ_DIR)/${path_name%/*}"
		
		[[ "$make_subdir" =~ "$obj_path" ]] || {
			# append new sub ddir
			make_subdir+=" $obj_path"
		}
		
		#pdbg "make_subdir=$make_subdir"
		
        # obj的头文件依赖
        #dependent_file=""
        #for dep_header in $(grep "#include " $path_name); do
        #    [ "#include" = "${dep_header}" ] && continue
        # 		remove < , > or "
        #    dep_header=${dep_header#*<}
        #    dep_header=${dep_header%>*}
        #    dep_header=${dep_header#*\"}
        #    dep_header=${dep_header%\"*}
        #    
		#	pdbg "$dep_header"
        #   for dep_match in ${header_files}; do
        #        [[ "${dep_match}" =~ "$dep_header" ]] && dependent_file+=" ${dep_match}"
        #   done
        #done
        #pdbg "$dependent_file"

        # 组装 obj 生成规则
        if [ "$types" = "so" ]; then
            target_objs+=" ${obj_name}.pic"
            [[ "$make_obj_names" =~ "${obj_name}.pic" ]] || {
                # append new obj_name
                make_obj_names+=" ${obj_name}.pic"
                echo >> $make_obj_file
                echo "${obj_name}.pic : \$(ROOT_DIR)/${path_name}$dependent_file" >> $make_obj_file
                printf "\t${CC} \$(COPTM) \$(CFLAG) -fPIC -c -o \$@ \$(ROOT_DIR)/$path_name\n" >> $make_obj_file
            }
        elif [ "$types" = "ar" ]; then
            target_ars+=" ${obj_name}"
            [[ "$make_obj_names" =~ "${obj_name}" ]] || {
                # append new obj_name
                make_obj_names+=" ${obj_name}"
                echo >> $make_obj_file
                echo "${obj_name} : \$(ROOT_DIR)/${path_name}$dependent_file" >> $make_obj_file
                printf "\t${CC} \$(COPTM) \$(CFLAG) -c -o \$@ \$(ROOT_DIR)/$path_name\n" >> $make_obj_file
            }
        elif  [ "$types" = "app" ]; then
            target_objs+=" ${obj_name}"
            [[ "$make_obj_names" =~ "${obj_name}" ]] || {
                # append new obj_name
                make_obj_names+=" ${obj_name}"
                echo >> $make_obj_file
                echo "${obj_name} : \$(ROOT_DIR)/${path_name}$dependent_file" >> $make_obj_file
                printf "\t${CC} \$(COPTM) \$(CFLAG) -c -o \$@ \$(ROOT_DIR)/$path_name\n" >> $make_obj_file
            }
        else
            perr "impossible type"
        fi
		
	done
	
	# 目标依赖项目生成
	if [ -n "$target_ars" ]; then
		echo >> $make_target_file
		#生成静态库
		printf "$target_ar : $target_ars\n" >> $make_target_file
		printf "\t\$(AR) cr \$@ \$^\n" >> $make_target_file
		printf "\t@ranlib  \$@\n" >> $make_target_file
	fi
	
	if [ -n "$target_objs" ]; then
		echo >> $make_target_file
		if [ "$types" = "app" ]; then
			# 生成项目
			printf "$target_app : $target_objs$target_deps\n" >> $make_target_file
			printf "\t${CC} \$(OPTM) -Wl,--as-needed,--sort-common,-rpath=\$(LIBS_BIN) -L\$(LIBS_BIN) -o \$@ ${target_objs} \$(LDFLAGS)\n" >> $make_target_file
			echo "ifeq (\$(BUILDS),release)" >> $make_target_file
			printf "\t@strip \$@\n" >> $make_target_file
			echo "endif" >> $make_target_file
		else
			printf "$target_so : $target_objs\n" >> $make_target_file
			printf "\t${CC} \$(OPTM) -shared -Wl,--sort-common,-soname,${target_so_base}.\$(VER_MAJOR) -o \$@ ${target_objs}\n" >> $make_target_file
			# 建立软链接，本地测试用
			printf "\t@rm -f ${target_so_name} ${target_so_name}.\$(VER_MAJOR)\n" >> $make_target_file
			printf "\t@cd \$(BUILDS_DIR) && ldconfig -l ${target_so_base}.\$(VERSION)  && ln -s ${target_so_base}.\$(VER_MAJOR) ${target_so_base}\n" >> $make_target_file
			echo "ifeq (\$(BUILDS),release)" >> $make_target_file
			printf "\t@strip \$@\n" >> $make_target_file
			echo "endif" >> $make_target_file
		fi
	fi
	
	# all: prepare <item0> <item1> ...
    if [ -n "$target_so" ]; then
        printf " $target_so" >> $makefiles
    fi

    if [ -n "$target_ar" ]; then
        printf " $target_ar" >> $makefiles
    fi

    if [ -n "$target_app" ]; then
        printf " $target_app" >> $makefiles
    fi
	
	#拷贝依赖的头文件	
	if [ "$types" = "ar" ]; then
		#库文件需要postpare处理
		printf " postpare" >> $makefiles
		#make all
		echo >> $makefiles
		echo "prepare:" >> $makefiles
		printf "\t@mkdir -p \$(BIN_DIR) \$(OBJ_DIR) ${make_subdir} \$(LIBS_INC)\n" >> $makefiles
		#make clean
		echo >> $makefiles
		echo ".PHONY: clean" >> $makefiles
		echo "clean:" >> $makefiles
		printf "\t@rm -fr \$(BIN_DIR) \$(OBJ_DIR) \$(LIBS_INC) \n" >> $makefiles
		
		#所有的头文件拷贝到指定的目录下:libs/include/vos/..
		K=0
		for itempath in ${rootdirs[@]}; 
		do
			getincfiles $itempath
		done
		
		echo >> $makefiles
		echo "postpare:" >> $makefiles
		#printf "\t@find . -name '*.h'|xargs -t -i -I{} cp -fr {} \$(LIBS_INC) \n" >> $makefiles
		printf "\t@cp -fr $target_ar \$(LIBS_BIN) \n" >> $makefiles
		printf "\t@rm -fr $target_ar \n" >> $makefiles
	else
		#make all
		echo >> $makefiles
		echo "prepare:" >> $makefiles
		printf "\t@mkdir -p \$(BIN_DIR) \$(OBJ_DIR) ${make_subdir} \n" >> $makefiles
		#make clean
		echo >> $makefiles
		echo ".PHONY: clean" >> $makefiles
		echo "clean:" >> $makefiles
		printf "\t@rm -fr \$(BIN_DIR) \$(OBJ_DIR) \n" >> $makefiles
	fi
	
	if [ -f ${make_target_file} ]; then
		cat ${make_target_file} >> $makefiles
	fi

	if [ -f ${make_obj_file} ]; then
		cat ${make_obj_file} >> $makefiles
	fi
	echo >> $makefiles
	
	################################################
	#拷贝Makefile到相应的根目录下
	cp $makefiles $rootpath/Makefile
	rm -fr $makefiles
	################################################
	
	################################################
	################################################
	#reset
	make_subdir=""
	make_ldflags=""
	make_cflag=""
	make_rootdir=""
	make_incdir=""
	unset srcfiles
	unset incfiles
	unset rootdirs
	unset makearry
	#remove all the *.mk files for next makefile
	rm -fr ${make_obj_file} ${make_target_file} ${make_install_file} ${make_uninstall_file}
done
pinf "========================================================================"













